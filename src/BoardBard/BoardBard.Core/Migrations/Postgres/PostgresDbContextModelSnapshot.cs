// <auto-generated />
using System;
using BoardBard.Core.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoardBard.Core.Migrations.Postgres
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoardBard.Core.Models.App.LabelType", b =>
                {
                    b.Property<int>("LabelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabelTypeId"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("LabelTypeId");

                    b.ToTable("LabelTypes", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskActivity", b =>
                {
                    b.Property<int>("TaskActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskActivityId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("integer");

                    b.HasKey("TaskActivityId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskActivities", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskBoard", b =>
                {
                    b.Property<int>("TaskBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskBoardId"));

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Starred")
                        .HasColumnType("boolean");

                    b.HasKey("TaskBoardId");

                    b.ToTable("TaskBoards", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskCard", b =>
                {
                    b.Property<int>("TaskCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskCardId"));

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Collapsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("TaskBoardId")
                        .HasColumnType("integer");

                    b.HasKey("TaskCardId");

                    b.HasIndex("TaskBoardId");

                    b.ToTable("TaskCards", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40000)
                        .HasColumnType("character varying(40000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskCardId")
                        .HasColumnType("integer");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskCardId");

                    b.ToTable("Tasks", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskLabelLink", b =>
                {
                    b.Property<int>("TaskLabelLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskLabelLinkId"));

                    b.Property<int>("LabelTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("TaskLabelLinkId");

                    b.HasIndex("LabelTypeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskLabelLinks", "Core");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskActivity", b =>
                {
                    b.HasOne("BoardBard.Core.Models.App.TaskItem", "TaskItem")
                        .WithMany("Activities")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskCard", b =>
                {
                    b.HasOne("BoardBard.Core.Models.App.TaskBoard", "TaskBoard")
                        .WithMany("TaskCards")
                        .HasForeignKey("TaskBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskBoard");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskItem", b =>
                {
                    b.HasOne("BoardBard.Core.Models.App.TaskCard", "TaskCard")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCard");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskLabelLink", b =>
                {
                    b.HasOne("BoardBard.Core.Models.App.LabelType", "LabelType")
                        .WithMany()
                        .HasForeignKey("LabelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardBard.Core.Models.App.TaskItem", "TaskItem")
                        .WithMany("LabelLinks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabelType");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskBoard", b =>
                {
                    b.Navigation("TaskCards");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskCard", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("BoardBard.Core.Models.App.TaskItem", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("LabelLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
